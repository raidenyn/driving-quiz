{"version":3,"sources":["store/session/actions.ts","store/selectors/correct-answer.ts","components/QuestionPicture/index.tsx","components/CurrentQuestion/QuestionPanel/index.tsx","components/CurrentQuestion/QuestionLayout/index.tsx","components/CurrentQuestion/AnswersPanel/AnswerPanel/styles.tsx","components/CurrentQuestion/AnswersPanel/AnswerPanel/index.tsx","components/CurrentQuestion/AnswersPanel/index.tsx","components/CurrentQuestion/index.tsx","components/NewSessionButton/index.tsx","components/NextQuestionButton/styles.tsx","components/NextQuestionButton/index.tsx","components/SessionProgressBar/styles.tsx","components/SessionProgressBar/index.tsx","components/SessionResult/styles.tsx","components/SessionResult/index.tsx","components/LandingPage/index.tsx","containers/SessionQuestionContainer.tsx","components/SearchQuestionsResult/SearchResultItem/styles.tsx","components/SearchQuestionsResult/SearchResultItem/index.tsx","components/SearchQuestionsResult/index.tsx","store/selectors/search-result.ts","containers/SearchResultContainer.tsx","components/MainLayout/index.tsx","components/MainMenu/MainMenuLayout/styles.tsx","components/MainMenu/MainMenuLayout/index.tsx","components/MainMenu/SearchInput/styles.tsx","components/MainMenu/SearchInput/index.tsx","store/search/actions.ts","containers/MainMenu/SearchInputContainer.tsx","components/MainMenu/MenuButton/styles.tsx","components/MainMenu/MenuButton/index.tsx","components/MainMenu/MenuList/index.tsx","containers/MainMenu/MainMenuContainer.tsx","containers/MainMenu/MainMenuLayoutContainer.tsx","containers/MainLayoutContainer.tsx","router.tsx","App.tsx","serviceWorker.ts","store/questions/actions.ts","store/questions/reducers.ts","store/session/reducers.ts","store/search/reducers.ts","store/reducer.ts","store/questions/epics.ts","store/session/epics.ts","store/session/logic/select-random.ts","store/search/epics.ts","store/epics.ts","store/index.ts","index.tsx"],"names":["sessionActions","createNew","createAction","setSession","answer","nextQuestion","currentSession","state","session","current","questions","all","currentSessionQuestion","createSelector","index","currentQuestionIndex","currentQuestion","question","questionId","isCorrectAnswer","sessionQuestion","correctAnswerId","gottenAnswerId","totalQuestionsCount","Object","keys","length","currentQuestionsCount","totalCorrectAnswers","reduce","total","QuestionPicture","props","src","Box","maxWidth","alt","QuestionPanel","text","picture","QuestionLayout","Paper","elevation","m","Grid","container","spacing","item","xs","answers","AnswerButton","styled","isCorrect","isGotten","Button","variant","undefined","AnswerId","span","AnswerText","AnswerPicture","img","AnswerPanel","answerId","isAvailable","onAnswer","onGettingAnswer","useCallback","onClick","disabled","AnswersPanel","entries","map","id","sm","key","CurrentQuestion","NewSessionButton","onNewSession","NextButton","Container","NextQuestionButton","onNextQuestion","Counter","Correct","SessionProgressBar","correct","Result","SessionResult","LandingPage","onCreateNewSession","Typography","component","display","justifyContent","connector","connect","totalQuestions","correctAnswers","SearchResultItemCard","Card","SearchResultItem","CardContent","color","gutterBottom","SearchQuestionResult","currentSearchResultQuestions","search","result","questionIds","resultQuestions","MainLayout","mainMenu","children","useStyles","makeStyles","theme","createStyles","root","flexGrow","title","breakpoints","up","MainMenuLayout","menu","classes","className","AppBar","position","Toolbar","noWrap","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","inputRoot","inputInput","paddingLeft","transition","transitions","create","SearchInput","searchPhrase","onSearchPhraseChanged","onChange","event","target","value","InputBase","placeholder","input","inputProps","searchActions","setSearchPhrase","setSearchResult","menuButton","marginRight","MenuButton","menuList","useState","open","setOpen","onToggle","closeList","bind","IconButton","edge","aria-label","Drawer","anchor","onClose","role","onKeyDown","MenuList","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","_","createNewSession","Router","basename","path","SearchQuestionContainer","layout","MainLayoutContainer","exact","SessionQuestionContainer","LayoutRouter","LayoutComponent","Layout","Component","App","Boolean","window","location","hostname","match","questionsActions","retrieve","append","questionReducers","createReducer","handleAction","action","produce","draft","payload","sessionReducers","qestion","searchReducer","rootReducer","combineReducers","epics","retrieveQuestions","action$","pipe","filter","isActionOf","mergeMap","a","getter","default","versions","newAnswers","version","newVersion","splice","Math","floor","random","initialize","of","questionsEpics","combineEpics","values","state$","withLatestFrom","allQuestionIds","count","items","Array","i","push","selectRandom","sessionsEpics","searchQuestions","indexOf","searchEpics","rootEpics","epicMiddleware","createEpicMiddleware","ReactDOM","render","store","initialState","middlerware","enhancer","compose","applyMiddleware","createStore","configureStore","run","newStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e86ec90.chunk.js","sourcesContent":["import {ActionType, createAction} from \"typesafe-actions\";\nimport {Session} from \"./state\";\n\nexport const sessionActions =  {\n    createNew: createAction(\"SESSION/CREATE-NEW\")(),\n\n    setSession: createAction(\"SESSION/SET-SESSION\")<Session>(),\n\n    answer: createAction(\"SESSION/ANSWER\")<{ answerId: string }>(),\n\n    nextQuestion: createAction(\"SESSION/NEXT-QUESTION\")(),\n}\n\nexport type SessionActions = ActionType<typeof sessionActions>\n","import { createSelector } from 'reselect'\nimport {RootState} from \"../state\";\nimport {Question} from \"../questions/state\";\nimport {SessionQuestion} from \"../session/state\";\n\nconst currentSession = (state: RootState) => state.session.current\n\nconst questions = (state: RootState) => state.questions.all\n\nexport const currentSessionQuestion = createSelector(\n    currentSession,\n    (session) => {\n        if (!session) {\n            return null\n        }\n        const index = session.currentQuestionIndex\n        return index == null ? null : session.questions[index]\n    }\n)\n\nexport const currentQuestion = createSelector(\n    currentSessionQuestion,\n    questions,\n    (question, questions) => {\n        if (!question) {\n            return null\n        }\n        return questions[question.questionId]\n    }\n)\n\nconst isCorrectAnswer = (question: Question, sessionQuestion: SessionQuestion) => {\n    return question.correctAnswerId === sessionQuestion.gottenAnswerId\n}\n\nexport const currentAnswerIsCorrect = createSelector(\n    currentQuestion,\n    currentSessionQuestion,\n    (question, sessionQuestion) => {\n        if (!question || !sessionQuestion) {\n            return null\n        }\n        return isCorrectAnswer(question, sessionQuestion)\n    }\n)\n\nexport const totalQuestionsCount = createSelector(\n    currentSession,\n    (session) => session ? Object.keys(session.questions).length : null,\n)\n\nexport const currentQuestionsCount = createSelector(\n    currentSession,\n    (session) => session ? session.currentQuestionIndex + 1 : null,\n)\n\nexport const totalCorrectAnswers = createSelector(\n    currentSession,\n    questions,\n    (session, questions) => {\n        if (!session || !questions) {\n            return null\n        }\n        return session.questions.reduce((total, question) => {\n            if (isCorrectAnswer(questions[question.questionId], question)) {\n                total++\n            }\n            return total\n        }, 0)\n    }\n)\n","import React from \"react\"\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nexport interface Props {\r\n    src: string | undefined\r\n}\r\n\r\nexport const QuestionPicture: React.FunctionComponent<Props> = (props) => {\r\n    if (props.src == null) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <Box maxWidth=\"sm\">\r\n            <img src={`images/${props.src}`} alt=\"question\"/>\r\n        </Box>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport {Box} from \"@material-ui/core\";\r\nimport { QuestionPicture } from \"../../QuestionPicture\";\r\n\r\nexport interface Props {\r\n    questionId: number\r\n\r\n    text: string\r\n\r\n    picture: string | undefined\r\n}\r\n\r\nexport const QuestionPanel: React.FunctionComponent<Props> = (props) => {\r\n    return (\r\n        <Box maxWidth=\"sm\">\r\n           {props.questionId}. {props.text}\r\n           <QuestionPicture src={props.picture} />\r\n        </Box>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport {Box, Grid, Paper} from \"@material-ui/core\";\r\n\r\nexport interface Props {\r\n    question: React.ReactNode\r\n\r\n    answers: React.ReactNode\r\n}\r\n\r\nexport const QuestionLayout: React.FunctionComponent<Props> = (props) => {\r\n    return (\r\n        <Paper elevation={3}>\r\n            <Box m={3}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        {props.question}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {props.answers}\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Paper>\r\n    )\r\n}\r\n","import styled from 'styled-components'\nimport {Button, ButtonProps} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface AnswerButtonProps extends ButtonProps {\n    isCorrect: boolean | null\n\n    isGotten: boolean | null\n}\n\nexport const AnswerButton = styled(\n    ({isCorrect, isGotten, ...props}: AnswerButtonProps) => <Button {...props} variant=\"contained\"/>\n)<AnswerButtonProps>`\n  &, &:hover, &.Mui-disabled {\n    background-color: ${({isCorrect, isGotten}) => isCorrect ? \"LawnGreen\" : (isGotten ? \"yellow\" : undefined)};\n    width: 100%;\n    height: 100%;\n  }\n  \n  &.Mui-disabled {\n    color: ${({isCorrect, isGotten}) => (isCorrect || isGotten) && \"black\" };\n  }\n`\n\nexport const AnswerId = styled.span`\n  font-weight: bold;\n  padding-right: 10px;\n`\n\nexport const AnswerText = styled.span`\n  text-transform: none;\n`\n\nexport const AnswerPicture = styled.img`\n`\n","import React, {useCallback} from \"react\"\r\nimport {Answer} from \"../../../../store/questions/state\";\r\nimport {AnswerButton, AnswerId, AnswerPicture, AnswerText} from \"./styles\";\r\n\r\nexport interface Props {\r\n    answerId: string\r\n\r\n    answer: Answer\r\n\r\n    isAvailable: boolean\r\n\r\n    isCorrect: boolean\r\n\r\n    isGotten: boolean\r\n\r\n    onAnswer(params: { answerId: string }): void\r\n}\r\n\r\nexport const AnswerPanel: React.FunctionComponent<Props> =\r\n    (\r\n        { answerId, answer, isAvailable, isCorrect, isGotten, onAnswer }\r\n    ) => {\r\n    const onGettingAnswer = useCallback(\r\n        () => {\r\n            if (isAvailable) {\r\n                onAnswer({ answerId })\r\n            }\r\n        },\r\n        [onAnswer, isAvailable, answerId]\r\n    )\r\n\r\n    return (\r\n        <AnswerButton\r\n            isCorrect={isCorrect}\r\n            isGotten={isGotten}\r\n            onClick={onGettingAnswer}\r\n            disabled={!isAvailable}\r\n        >\r\n            <AnswerId>{answerId}.</AnswerId>\r\n            <AnswerText>\r\n                {answer.text}\r\n            </AnswerText>\r\n            {\r\n                answer.picture &&\r\n                <AnswerPicture src={`images/${answer.picture}`} />\r\n            }\r\n        </AnswerButton>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {Answers} from \"../../../store/questions/state\";\r\nimport {AnswerPanel} from \"./AnswerPanel\";\r\n\r\nexport interface Props {\r\n    answers: Answers\r\n\r\n    correctAnswerId: string | null\r\n\r\n    gottenAnswerId: string | null\r\n\r\n    onAnswer(params: { answerId: string }): void\r\n}\r\n\r\nexport const AnswersPanel: React.FunctionComponent<Props> = (props) => {\r\n    return (\r\n        <Grid container spacing={2}>\r\n            {\r\n                Object.entries(props.answers)\r\n                    .map(([id, answer]) => (\r\n                        <Grid item xs={12} sm={6} key={id}>\r\n                            <AnswerPanel\r\n                                answerId={id}\r\n                                answer={answer}\r\n                                isAvailable={props.gottenAnswerId == null}\r\n                                isCorrect={props.correctAnswerId === id}\r\n                                isGotten={props.gottenAnswerId === id}\r\n                                onAnswer={props.onAnswer}\r\n                            />\r\n                        </Grid>\r\n                    ))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n","import React from \"react\"\nimport {QuestionPanel} from \"./QuestionPanel\";\nimport {Question} from \"../../store/questions/state\";\nimport {QuestionLayout} from \"./QuestionLayout\";\nimport {AnswersPanel} from \"./AnswersPanel\";\n\nexport interface Props {\n    question: Question\n\n    gottenAnswerId: string | null\n\n    onAnswer(params: { answerId: string }): void\n}\n\nexport const CurrentQuestion: React.FunctionComponent<Props> = ({ question, gottenAnswerId, onAnswer }) => {\n    return (\n        <QuestionLayout\n            question={\n                <QuestionPanel\n                    questionId={question.id}\n                    text={question.text}\n                    picture={question.picture}\n                />\n            }\n            answers={\n                <AnswersPanel\n                    answers={question.answers}\n                    correctAnswerId={gottenAnswerId && question.correctAnswerId}\n                    gottenAnswerId={gottenAnswerId}\n                    onAnswer={onAnswer}\n                />\n            }\n        />\n    )\n}\n","import React from \"react\"\nimport {Button} from \"@material-ui/core\";\n\n\nexport interface Props {\n    onNewSession(): void\n}\n\nexport const NewSessionButton: React.FunctionComponent<Props> = ({ onNewSession }) => {\n    return (\n        <Button onClick={onNewSession}>\n            Start a new session\n        </Button>\n    )\n}\n","import styled from 'styled-components'\nimport {Container} from \"@material-ui/core\";\n\nexport const NextButton = styled(Container)`\n  padding: 20px 20px;\n  display: flex;\n  justify-content: center;\n  justify-items: center;\n`\n","import React from \"react\"\nimport {Button} from \"@material-ui/core\";\nimport {NextButton} from \"./styles\";\n\n\nexport interface Props {\n    onNextQuestion(): void\n}\n\nexport const NextQuestionButton: React.FunctionComponent<Props> = ({ onNextQuestion }) => {\n    return (\n        <NextButton>\n            <Button onClick={onNextQuestion} variant=\"outlined\">\n                Next question >>>\n            </Button>\n        </NextButton>\n    )\n}\n","import styled from 'styled-components'\nimport {Box} from \"@material-ui/core\";\n\nexport const Counter = styled(Box)`\n  padding: 20px 20px;\n`\n\nexport const Correct = styled.span`\n  color: green;\n`\n","import React from \"react\"\nimport {Correct, Counter} from \"./styles\";\n\nexport interface Props {\n    total: number\n\n    current: number\n\n    correct: number\n}\n\nexport const SessionProgressBar: React.FunctionComponent<Props> =\n    ({ total, current, correct}) => {\n    return (\n        <>\n            <Counter>\n                progress: { current } / { total }, correct: <Correct>{ correct }</Correct>\n            </Counter>\n        </>\n    )\n}\n","import styled from 'styled-components'\nimport {Box} from \"@material-ui/core\";\n\nexport const Result = styled(Box)`\n  padding: 20px 20px;\n`\n\nexport const Correct = styled.span`\n  color: green;\n`\n","import React from \"react\"\nimport {Correct, Result} from \"./styles\";\n\nexport interface Props {\n    total: number | null\n\n    correct: number | null\n}\n\nexport const SessionResult: React.FunctionComponent<Props> =\n    ({ total, correct}) => {\n    return (\n        <Result>\n            <p>\n                You have answered on { total } and\n                gotten <Correct>{ correct }</Correct> correct answers\n            </p>\n        </Result>\n    )\n}\n","import React from \"react\"\r\nimport {Box, Typography} from \"@material-ui/core\";\r\nimport {NewSessionButton} from \"../NewSessionButton\";\r\n\r\nexport interface Props {\r\n    onCreateNewSession(): void\r\n}\r\n\r\nexport const LandingPage: React.FunctionComponent<Props> = ({ onCreateNewSession }) => {\r\n    return (\r\n        <Box m={3}>\r\n            <Typography variant=\"h3\" component=\"h3\">\r\n                Welcome to Thailand Driving Test Quiz\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n                Here you can practice your knowledge in standard Thailand Driving Test questions.\r\n                The test contains real questions, that most likely you will see on real exam.\r\n            </Typography>\r\n            <Box display=\"flex\" m={3} justifyContent='center'>\r\n                <NewSessionButton onNewSession={onCreateNewSession} />\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n","import React from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\nimport {RootState} from \"../store/state\";\nimport {sessionActions} from \"../store/session/actions\";\nimport {\n    currentQuestion, currentQuestionsCount,\n    currentSessionQuestion,\n    totalCorrectAnswers,\n    totalQuestionsCount\n} from \"../store/selectors/correct-answer\";\nimport {CurrentQuestion} from \"../components/CurrentQuestion\";\nimport {NewSessionButton} from \"../components/NewSessionButton\";\nimport {NextQuestionButton} from \"../components/NextQuestionButton\";\nimport {Container} from \"@material-ui/core\";\nimport {SessionProgressBar} from \"../components/SessionProgressBar\";\nimport {SessionResult} from \"../components/SessionResult\";\nimport {LandingPage} from \"../components/LandingPage\";\n\nconst connector = connect(\n    (state: RootState)=> {\n        return {\n            session: state.session.current,\n            question: currentQuestion(state),\n            gottenAnswerId: currentSessionQuestion(state)?.gottenAnswerId || null,\n\n            totalQuestions: totalQuestionsCount(state),\n            currentQuestion: currentQuestionsCount(state),\n            correctAnswers: totalCorrectAnswers(state),\n        }\n    },\n    sessionActions\n)\n\ntype Props = ConnectedProps<typeof connector>\n\nconst Question: React.FunctionComponent<Props> = (props) => {\n    if (!props.session) {\n        return <LandingPage onCreateNewSession={props.createNew} />\n    }\n\n    if (!props.question) {\n        return (\n            <Container>\n                <SessionResult\n                    total={props.totalQuestions}\n                    correct={props.correctAnswers}\n                />\n                <NewSessionButton onNewSession={props.createNew} />\n            </Container>\n        )\n    }\n\n    return (\n        <Container>\n            <SessionProgressBar\n                total={props.totalQuestions!}\n                current={props.currentQuestion!}\n                correct={props.correctAnswers!}\n            />\n            <CurrentQuestion\n                key=\"question\"\n                question={props.question}\n                gottenAnswerId={props.gottenAnswerId}\n                onAnswer={props.answer}\n            />\n            {\n                props.gottenAnswerId != null &&\n                (\n                    <NextQuestionButton key=\"next\" onNextQuestion={props.nextQuestion}/>\n                )\n            }\n        </Container>\n    )\n}\n\nexport default connector(Question)\n","import styled from \"styled-components\";\r\nimport {Card} from \"@material-ui/core\";\r\n\r\nexport const SearchResultItemCard = styled(Card)`\r\n  margin: 10px;\r\n`","import React from \"react\";\r\nimport { CardContent, Typography} from \"@material-ui/core\";\r\nimport {Question} from \"../../../store/questions/state\";\r\nimport {QuestionPicture} from \"../../QuestionPicture\";\r\nimport {SearchResultItemCard} from \"./styles\";\r\n\r\ninterface Props {\r\n    question: Question\r\n}\r\n\r\nexport const SearchResultItem: React.FunctionComponent<Props> = ({ question }) => {\r\n    return (\r\n        <SearchResultItemCard variant=\"outlined\">\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                    Question #{question.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                    {question.text}\r\n                </Typography>\r\n                {\r\n                    question.picture &&\r\n                    <QuestionPicture src={question.picture } />\r\n                }\r\n                <Typography color=\"textPrimary\">\r\n                    {question.correctAnswerId}. {question.answers[question.correctAnswerId].text}\r\n                </Typography>\r\n            </CardContent>\r\n        </SearchResultItemCard>\r\n    )\r\n}\r\n","import React from \"react\";\nimport {Question} from \"../../store/questions/state\";\nimport {SearchResultItem} from \"./SearchResultItem\";\n\ninterface Props {\n    questions: Question[]\n}\n\nexport const SearchQuestionResult: React.FunctionComponent<Props> = (props) => {\n    return (\n        <>\n            {props.questions.map((question) => (\n                <SearchResultItem question={question} key={question.id} />\n            ))}\n        </>\n    )\n}\n","import {RootState} from \"../state\";\nimport {createSelector} from \"reselect\";\n\nconst currentSearchResult = (state: RootState) => state.search.result\n\nconst questions = (state: RootState) => state.questions.all\n\nexport const currentSearchResultQuestions = createSelector(\n    currentSearchResult,\n    questions,\n    (result, questions) => {\n        if (!result) {\n            return null\n        }\n        return result.questionIds.map((id) => questions[id])\n    }\n)","import React from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\nimport {RootState} from \"../store/state\";\nimport {SearchQuestionResult} from \"../components/SearchQuestionsResult\";\nimport {currentSearchResultQuestions} from \"../store/selectors/search-result\";\n\nconst connector = connect(\n    (state: RootState)=> {\n        return {\n            resultQuestions: currentSearchResultQuestions(state),\n        }\n    },\n)\n\ntype Props = ConnectedProps<typeof connector>\n\nconst SearchResultContainer: React.FunctionComponent<Props> = ({ resultQuestions }) => {\n    if (resultQuestions == null) {\n        return <></>\n    }\n\n    return (\n        <SearchQuestionResult\n            questions={resultQuestions}\n        />\n    )\n}\n\nexport default connector(SearchResultContainer)\n","import React from \"react\";\r\nimport {Box, Container} from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n    mainMenu: React.ReactNode,\r\n}\r\n\r\nexport const MainLayout: React.FunctionComponent<Props> = ({ mainMenu, children }) => {\r\n    return (\r\n        <Container>\r\n            {mainMenu}\r\n            <Box>\r\n                {children}\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n        },\r\n    }),\r\n)\r\n","import React from \"react\";\r\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {useStyles} from \"./styles\";\r\n\r\ninterface Props {\r\n    menu: React.ReactNode\r\n\r\n    search: React.ReactNode\r\n}\r\n\r\nexport const MainMenuLayout: React.FunctionComponent<Props> = ({menu, search}) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    {menu}\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        Thailand Driving Test Quiz\r\n                    </Typography>\r\n                    {search}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import {createStyles, fade, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        search: {\r\n            position: 'relative',\r\n            borderRadius: theme.shape.borderRadius,\r\n            backgroundColor: fade(theme.palette.common.white, 0.15),\r\n            '&:hover': {\r\n                backgroundColor: fade(theme.palette.common.white, 0.25),\r\n            },\r\n            marginLeft: 0,\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                marginLeft: theme.spacing(1),\r\n                width: 'auto',\r\n            },\r\n        },\r\n        searchIcon: {\r\n            padding: theme.spacing(0, 2),\r\n            height: '100%',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        inputRoot: {\r\n            color: 'inherit',\r\n        },\r\n        inputInput: {\r\n            padding: theme.spacing(1, 1, 1, 0),\r\n            // vertical padding + font size from searchIcon\r\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n            transition: theme.transitions.create('width'),\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: '12ch',\r\n                '&:focus': {\r\n                    width: '20ch',\r\n                },\r\n            },\r\n        },\r\n    }),\r\n)\r\n","import React, {useCallback} from \"react\";\r\nimport {InputBase} from \"@material-ui/core\";\r\nimport {useStyles} from \"./styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\ninterface Props {\r\n    searchPhrase: string\r\n\r\n    onSearchPhraseChanged(params: { searchPhrase: string }): void\r\n}\r\n\r\nexport const SearchInput: React.FunctionComponent<Props> = ({ searchPhrase, onSearchPhraseChanged }) => {\r\n    const classes = useStyles()\r\n\r\n    const onChange = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            onSearchPhraseChanged({ searchPhrase: event.target.value })\r\n        },\r\n        [onSearchPhraseChanged])\r\n\r\n    return (\r\n        <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n                <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n                placeholder=\"Search…\"\r\n                classes={{\r\n                    root: classes.inputRoot,\r\n                    input: classes.inputInput,\r\n                }}\r\n                inputProps={{ 'aria-label': 'search' }}\r\n                value={searchPhrase}\r\n                onChange={onChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {ActionType, createAction} from \"typesafe-actions\";\n\nexport const searchActions =  {\n    setSearchPhrase: createAction(\"SEARCH/SET-SEARCH-PHRASE\")<{ searchPhrase: string }>(),\n\n    setSearchResult: createAction(\"SEARCH/SET-SEARCH-RESULT\")<{ questionIds: number[] | null }>(),\n}\n\nexport type SearchActions = ActionType<typeof searchActions>\n","import React from 'react'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport {SearchInput} from \"../../components/MainMenu/SearchInput\";\r\nimport {RootState} from \"../../store/state\";\r\nimport {searchActions} from \"../../store/search/actions\";\r\n\r\nconst connector = connect(\r\n    (state: RootState)=> {\r\n        return {\r\n            searchPhrase: state.search.searchPhrase,\r\n        }\r\n    },\r\n    {\r\n        setSearchPhrase: searchActions.setSearchPhrase,\r\n    }\r\n)\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst SearchInputContainer: React.FunctionComponent<Props> = ({ searchPhrase, setSearchPhrase }) => {\r\n    return (\r\n        <SearchInput\r\n            searchPhrase={searchPhrase}\r\n            onSearchPhraseChanged={setSearchPhrase}\r\n        />\r\n    )\r\n}\r\n\r\nexport default connector(SearchInputContainer)\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n","import React, {useCallback, useState} from \"react\";\r\nimport {Drawer, IconButton} from \"@material-ui/core\";\r\nimport {useStyles} from \"./styles\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\ninterface Props {\r\n    menuList: React.ReactNode\r\n}\r\n\r\nexport const MenuButton: React.FunctionComponent<Props> = ({ menuList }) => {\r\n    const classes = useStyles()\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const onToggle = useCallback(\r\n        () => setOpen(!open),\r\n        [open, setOpen]\r\n    )\r\n\r\n    const closeList = setOpen.bind(null, false)\r\n\r\n    return (\r\n        <>\r\n            <IconButton\r\n                edge=\"start\"\r\n                className={classes.menuButton}\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                onClick={onToggle}\r\n            >\r\n                <MenuIcon />\r\n            </IconButton>\r\n\r\n            <Drawer anchor=\"left\" open={open} onClose={closeList}>\r\n                <div\r\n                    role=\"presentation\"\r\n                    onClick={closeList}\r\n                    onKeyDown={closeList}\r\n                >\r\n                    {menuList}\r\n                </div>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n","\r\n\r\nimport React from \"react\";\r\nimport List from '@material-ui/core/List';\r\nimport {Divider, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport OpenInNew from '@material-ui/icons/OpenInNew';\r\n\r\ninterface Props {\r\n    onNewSession(): void\r\n}\r\n\r\nexport const MenuList: React.FunctionComponent<Props> = ({ onNewSession }) => {\r\n    return (\r\n        <>\r\n            <List>\r\n                <ListItem button onClick={onNewSession}>\r\n                    <ListItemIcon><OpenInNew /></ListItemIcon>\r\n                    <ListItemText primary={'Start New Quiz'} />\r\n                </ListItem>\r\n            </List>\r\n            <Divider />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport {MenuButton} from \"../../components/MainMenu/MenuButton\";\r\nimport {sessionActions} from \"../../store/session/actions\";\r\nimport {RootState} from \"../../store/state\";\r\nimport {MenuList} from \"../../components/MainMenu/MenuList\";\r\n\r\nconst connector = connect(\r\n    (_: RootState) => ({ }),\r\n    {\r\n        createNewSession: sessionActions.createNew,\r\n    },\r\n)\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst MainMenuContainer: React.FunctionComponent<Props> = (\r\n    { createNewSession }\r\n) => {\r\n    return (\r\n        <MenuButton\r\n            menuList={\r\n                <MenuList\r\n                    onNewSession={createNewSession}\r\n                />\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default connector(MainMenuContainer)\r\n","import React from 'react'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport {MainMenuLayout} from \"../../components/MainMenu/MainMenuLayout\";\r\nimport SearchInputContainer from \"./SearchInputContainer\";\r\nimport MainMenuContainer from \"./MainMenuContainer\";\r\n\r\nconst connector = connect()\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst MainMenuLayoutContainer: React.FunctionComponent<Props> = () => {\r\n    return (\r\n        <MainMenuLayout\r\n            menu={<MainMenuContainer />}\r\n            search={<SearchInputContainer />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default connector(MainMenuLayoutContainer)\r\n","import React from 'react'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport {MainLayout} from \"../components/MainLayout\";\r\nimport MainMenuContainer from \"./MainMenu/MainMenuLayoutContainer\";\r\nimport {RootState} from \"../store/state\";\r\nimport {currentSearchResultQuestions} from \"../store/selectors/search-result\";\r\nimport SearchResultContainer from \"./SearchResultContainer\";\r\n\r\nconst connector = connect(\r\n    (state: RootState)=> {\r\n        return {\r\n            resultQuestions: currentSearchResultQuestions(state),\r\n        }\r\n    },\r\n)\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst MainLayoutContainer: React.FunctionComponent<Props> = ({ resultQuestions, children }) => {\r\n    return (\r\n        <MainLayout\r\n            mainMenu={\r\n                <MainMenuContainer />\r\n            }\r\n        >\r\n            {\r\n                resultQuestions\r\n                ? <SearchResultContainer />\r\n                : <>{children}</>\r\n            }\r\n        </MainLayout>\r\n    )\r\n}\r\n\r\nexport default connector(MainLayoutContainer)\r\n","import React, {useCallback} from \"react\";\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport SessionQuestionContainer from \"./containers/SessionQuestionContainer\";\nimport SearchQuestionContainer from \"./containers/SearchResultContainer\";\nimport MainLayoutContainer from \"./containers/MainLayoutContainer\";\n\nexport const Router: React.FunctionComponent = () => (\n    <BrowserRouter basename=\"/driving-quiz\" >\n        <LayoutRouter path=\"/search\" component={SearchQuestionContainer} layout={MainLayoutContainer} exact />\n        <LayoutRouter path=\"/\" component={SessionQuestionContainer} layout={MainLayoutContainer}  exact />\n    </BrowserRouter>\n)\n\nconst LayoutRouter: React.FunctionComponent<typeof Route.prototype.props & { layout: React.FunctionComponent }> =\n    ({\n         component, layout, ...props\n    }) => {\n    const LayoutComponent = useCallback(\n        (() => {\n            const Layout = layout\n            const Component = component\n            return (\n                <Layout>\n                    <Component />\n                </Layout>\n            )\n        }) as React.FunctionComponent,\n        [layout, component]\n    )\n\n    return <Route component={LayoutComponent} {...props} />\n}\n","import React from 'react';\nimport {Router} from \"./router\";\n\nfunction App() {\n  return (\n    <>\n      <Router />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ActionType, createAction} from \"typesafe-actions\";\nimport {Question} from \"./state\";\n\nexport const questionsActions =  {\n    retrieve: createAction(\"QUESTIONS/RETRIEVE\")(),\n\n    append: createAction(\"QUESTIONS/APPEND\")<AppendQuestionParams>(),\n}\n\nexport type QuestionsActions = ActionType<typeof questionsActions>\n\nexport interface AppendQuestionParams {\n    questions: Question[]\n}\n\n","import {QuestionsState} from \"./state\";\nimport {questionsActions, QuestionsActions} from \"./actions\";\nimport {createReducer} from \"typesafe-actions\";\nimport produce from \"immer\";\n\nconst defaultState: QuestionsState = {\n    all: { }\n}\n\ndeclare module 'typesafe-actions' {\n    interface Types {\n        RootAction: QuestionsActions;\n    }\n}\n\nexport const questionReducers = createReducer(defaultState)\n    .handleAction(questionsActions.append, (state, action) =>\n        produce(state, draft => {\n            for (const question of action.payload.questions) {\n                draft.all[question.id] = question\n            }\n        }))\n","import {SessionState} from \"./state\";\nimport {createReducer} from \"typesafe-actions\";\nimport produce from \"immer\";\nimport {SessionActions, sessionActions} from \"./actions\";\n\nconst defaultState: SessionState = {\n    current: null,\n}\n\nexport const sessionReducers = createReducer<SessionState, SessionActions>(defaultState)\n    .handleAction(sessionActions.setSession, (state, action) =>\n        produce(state, draft => {\n            draft.current = action.payload\n        }))\n    .handleAction(sessionActions.answer, (state, action) =>\n        produce(state, draft => {\n            const qestion = draft.current?.questions[draft.current.currentQuestionIndex]\n            if (qestion) {\n                qestion.gottenAnswerId = action.payload.answerId\n            }\n        }))\n    .handleAction(sessionActions.nextQuestion, (state) =>\n        produce(state, draft => {\n            if (draft.current) {\n                draft.current.currentQuestionIndex++\n            }\n        }))\n","import {SearchState} from \"./state\";\nimport {createReducer} from \"typesafe-actions\";\nimport produce from \"immer\";\nimport {SearchActions, searchActions} from \"./actions\";\n\nconst defaultState: SearchState = {\n    searchPhrase: '',\n    result: null,\n}\n\nexport const searchReducer = createReducer<SearchState, SearchActions>(defaultState)\n    .handleAction(searchActions.setSearchPhrase, (state, action) =>\n        produce(state, draft => {\n            draft.searchPhrase = action.payload.searchPhrase\n        }))\n    .handleAction(searchActions.setSearchResult, (state, action) =>\n        produce(state, draft => {\n            draft.result = action.payload.questionIds != null ? { questionIds: action.payload.questionIds } : null\n        }))\n","import {combineReducers} from \"redux\";\n\nimport { questionReducers } from './questions/reducers'\nimport { sessionReducers } from './session/reducers'\nimport {searchReducer} from \"./search/reducers\";\n\nexport const rootReducer = combineReducers({\n    questions: questionReducers,\n    session: sessionReducers,\n    search: searchReducer,\n})\n","import {combineEpics, Epic} from \"redux-observable\";\nimport {questionsActions, QuestionsActions} from \"./actions\";\nimport {isActionOf} from \"typesafe-actions\";\nimport {filter, map, mergeMap} from \"rxjs/operators\";\nimport {RootState} from \"../state\";\nimport {of} from \"rxjs\";\nimport {Question} from \"./state\";\n\nconst epics : { [name: string] : Epic<QuestionsActions, QuestionsActions, RootState> } = {\n    retrieveQuestions: action$ =>\n        action$.pipe(\n            filter(isActionOf(questionsActions.retrieve)),\n            mergeMap(async _ => {\n                const { default: getter } = await import('../../data/questions')\n                return getter\n            }),\n            mergeMap( getter => getter()),\n            map((questions: Question[]) => {\n                // shuffle answers\n                for (const question of questions) {\n                    const versions = Object.keys(question.answers)\n                    const newAnswers: typeof question.answers = { }\n                    for (const [version, answer] of Object.entries(question.answers)) {\n                        const newVersion = versions.splice(Math.floor(Math.random() * versions.length), 1)[0]\n                        if (question.correctAnswerId === version) {\n                            question.correctAnswerId = newVersion\n                        }\n                        newAnswers[newVersion] = answer\n                    }\n                    question.answers = newAnswers\n                }\n                return questions\n            }),\n            map(questions => questionsActions.append({\n                questions\n            }))\n        ),\n\n    initialize: () => of(null).pipe(\n        map(() => questionsActions.retrieve())\n    ),\n}\n\nexport const questionsEpics = combineEpics<QuestionsActions, QuestionsActions, RootState>(...Object.values(epics))\n","import {combineEpics, Epic} from \"redux-observable\";\nimport {SessionQuestion} from \"./state\";\nimport {sessionActions, SessionActions} from \"./actions\";\nimport {isActionOf} from \"typesafe-actions\";\nimport {filter, map, withLatestFrom} from \"rxjs/operators\";\nimport {RootState} from \"../state\";\nimport {selectRandom} from \"./logic/select-random\";\n\nconst epics : { [name: string] : Epic<SessionActions, SessionActions, RootState> } = {\n    createNewSession: (action$, state$) =>\n        action$.pipe(\n            filter(isActionOf(sessionActions.createNew)),\n            withLatestFrom(state$),\n            map(([, state]) => {\n                const allQuestionIds = Object.keys(state.questions.all)\n                const questions = selectRandom(allQuestionIds, allQuestionIds.length)\n                    .map((questionId) => ({\n                        questionId: +questionId,\n                        gottenAnswerId: null,\n                    } as SessionQuestion))\n\n                return sessionActions.setSession({\n                    questions,\n                    currentQuestionIndex: 0\n                })\n            })\n        ),\n}\n\nexport const sessionsEpics = combineEpics<SessionActions, SessionActions, RootState>(...Object.values(epics))\n","export function selectRandom<TItem>(all: TItem[], count: number): TItem[] {\n    const items = [...all]\n    const result = new Array<TItem>()\n    for (let i = 0; i < count; i++) {\n        const index = Math.floor(Math.random() * items.length)\n        const item = items.splice(index, 1)[0]\n        result.push(item)\n    }\n    return result\n}","import {combineEpics, Epic} from \"redux-observable\";\nimport {searchActions, SearchActions} from \"./actions\";\nimport {isActionOf} from \"typesafe-actions\";\nimport {filter, map, withLatestFrom} from \"rxjs/operators\";\nimport {RootState} from \"../state\";\n\nconst epics : { [name: string] : Epic<SearchActions, SearchActions, RootState> } = {\n    searchQuestions: (action$, state$) =>\n        action$.pipe(\n            filter(isActionOf(searchActions.setSearchPhrase)),\n            withLatestFrom(state$),\n            map(([action, state]) => ({\n                searchPhrase: action.payload.searchPhrase,\n                questions: state.questions.all\n            })),\n            map(({searchPhrase, questions}) => {\n                if (searchPhrase) {\n                    return Object\n                        .values(questions)\n                        .filter((question) => {\n                            return question.text.indexOf(searchPhrase) >= 0\n                        })\n                        .map((question) => question.id)\n                } else {\n                    return null\n                }\n            }),\n            map((questionIds) => searchActions.setSearchResult({ questionIds }))\n        ),\n}\n\nexport const searchEpics = combineEpics<SearchActions, SearchActions, RootState>(...Object.values(epics))\n","import {combineEpics} from \"redux-observable\";\nimport {questionsEpics} from \"./questions/epics\";\nimport {sessionsEpics} from \"./session/epics\";\nimport {searchEpics} from \"./search/epics\";\n\nexport const rootEpics = combineEpics(\n    questionsEpics,\n    sessionsEpics,\n    searchEpics,\n)\n","import {createEpicMiddleware} from \"redux-observable\";\nimport {RootActions} from \"./actions\";\nimport {RootState} from \"./state\";\nimport {applyMiddleware, compose, createStore, Middleware} from \"redux\";\nimport {rootReducer} from \"./reducer\";\nimport {rootEpics} from \"./epics\";\nconst epicMiddleware = createEpicMiddleware<RootActions, RootActions, RootState>()\n\nfunction configureStore(initialState?: RootState) {\n    const middlerware: Middleware[] = [\n        epicMiddleware,\n    ]\n\n    const enhancer = compose(\n        applyMiddleware(...middlerware)\n    )\n\n    return createStore(\n        rootReducer,\n        initialState,\n        enhancer,\n    )\n}\n\nexport type RootStore = ReturnType<typeof configureStore>\n\nexport function newStore(initialState?: RootState) {\n    const store = configureStore(initialState)\n\n    epicMiddleware.run(rootEpics)\n\n    return store\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {newStore} from \"./store\";\n\nReactDOM.render((\n    <Provider store={newStore()}>\n        <App />\n    </Provider>\n),\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}