{"version":3,"sources":["store/session/actions.ts","store/selectors/correct-answer.ts","components/CurrentQuestion/styles.tsx","components/CurrentQuestion/index.tsx","components/NewSessionButton/index.tsx","components/NextQuestionButton/styles.tsx","components/NextQuestionButton/index.tsx","components/SessionAnswersCounter/styles.tsx","components/SessionAnswersCounter/index.tsx","components/SessionResult/styles.tsx","components/SessionResult/index.tsx","containers/SessionQuestionContainer.tsx","App.tsx","serviceWorker.ts","store/questions/actions.ts","store/questions/reducers.ts","store/session/reducers.ts","store/reducer.ts","store/questions/epics.ts","store/session/epics.ts","store/session/logic/select-random.ts","store/epics.ts","store/index.ts","index.tsx"],"names":["sessionActions","createNew","createAction","setSession","answer","nextQuestion","currentSession","state","session","current","questions","all","currentSessionQuestion","createSelector","index","currentQuestionIndex","currentQuestion","question","questionId","isCorrectAnswer","qestion","sessionQuestion","correctAnswerId","gottenAnswerId","totalQuestionsCount","Object","keys","length","currentQuestionsCount","totalCorrectAnswers","reduce","total","Answer","styled","isCorrect","isGotten","props","Button","variant","undefined","AnswerId","span","AnswerText","CurrentQuestion","onAnswer","onGettingAnswer","useCallback","params","Grid","container","spacing","item","xs","Paper","id","text","picture","src","alt","entries","answers","map","sm","key","onClick","bind","answerId","NewSessionButton","onNewSession","NextButton","Container","NextQuestionButton","onNextQuestion","Counter","Box","Correct","SessionAnswersCounter","correct","Result","SessionResult","connector","connect","totalQuestions","correctAnswers","App","SessionQuestionContainer","Boolean","window","location","hostname","match","questionsActions","retrieve","append","questionReducers","createReducer","handleAction","action","produce","draft","payload","sessionReducers","rootReducer","combineReducers","epics","retrieveQuestions","action$","pipe","filter","isActionOf","mergeMap","_","a","getter","default","initialize","of","questionsEpics","combineEpics","values","createNewSession","state$","withLatestFrom","allQuestionIds","count","items","result","Array","i","Math","floor","random","splice","push","selectRandom","sessionsEpics","rootEpics","epicMiddleware","createEpicMiddleware","ReactDOM","render","store","initialState","middlerware","enhancer","compose","applyMiddleware","createStore","configureStore","run","newStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92ae348b.chunk.js","sourcesContent":["import {ActionType, createAction} from \"typesafe-actions\";\nimport {Session} from \"./state\";\n\nexport const sessionActions =  {\n    createNew: createAction(\"SESSION/CREATE-NEW\")(),\n\n    setSession: createAction(\"SESSION/SET-SESSION\")<Session>(),\n\n    answer: createAction(\"SESSION/ANSWER\")<{ answerId: string }>(),\n\n    nextQuestion: createAction(\"SESSION/NEXT-QUESTION\")(),\n}\n\nexport type SessionActions = ActionType<typeof sessionActions>\n","import { createSelector } from 'reselect'\nimport {RootState} from \"../state\";\nimport {Question} from \"../questions/state\";\nimport {SessionQuestion} from \"../session/state\";\n\nconst currentSession = (state: RootState) => state.session.current\n\nconst questions = (state: RootState) => state.questions.all\n\nexport const currentSessionQuestion = createSelector(\n    currentSession,\n    (session) => {\n        if (!session) {\n            return null\n        }\n        const index = session.currentQuestionIndex\n        return index == null ? null : session.questions[index]\n    }\n)\n\nexport const currentQuestion = createSelector(\n    currentSessionQuestion,\n    questions,\n    (question, questions) => {\n        if (!question) {\n            return null\n        }\n        return questions[question.questionId]\n    }\n)\n\nconst isCorrectAnswer = (qestion: Question, sessionQuestion: SessionQuestion) => {\n    return qestion.correctAnswerId === sessionQuestion.gottenAnswerId\n}\n\nexport const currentAnswerIsCorrect = createSelector(\n    currentQuestion,\n    currentSessionQuestion,\n    (qestion, sessionQuestion) => {\n        if (!qestion || !sessionQuestion) {\n            return null\n        }\n        return isCorrectAnswer(qestion, sessionQuestion)\n    }\n)\n\nexport const totalQuestionsCount = createSelector(\n    currentSession,\n    (session) => session ? Object.keys(session.questions).length : null,\n)\n\nexport const currentQuestionsCount = createSelector(\n    currentSession,\n    (session) => session ? session.currentQuestionIndex + 1 : null,\n)\n\nexport const totalCorrectAnswers = createSelector(\n    currentSession,\n    questions,\n    (session, questions) => {\n        if (!session || !questions) {\n            return null\n        }\n        return session.questions.reduce((total, question) => {\n            if (isCorrectAnswer(questions[question.questionId], question)) {\n                total++\n            }\n            return total\n        }, 0)\n    }\n)\n","import styled from 'styled-components'\nimport {Button} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface AnswerProps {\n    isCorrect: boolean | null\n\n    isGotten: boolean | null\n}\n\nexport const Answer = styled(\n    ({isCorrect, isGotten, ...props}) => <Button {...props} variant=\"contained\"/>\n)<AnswerProps>`\n  &, &:hover {\n    background-color ${({isCorrect, isGotten}) => isCorrect ? \"green\" : (isGotten ? \"yellow\" : undefined)};\n    width: 100%;\n  }\n`\n\nexport const AnswerId = styled.span`\n  font-weight: bold;\n  padding-right: 10px;\n`\n\nexport const AnswerText = styled.span`\n  text-transform: none;\n`\n","import React, {useCallback} from \"react\"\nimport {Question} from \"../../store/questions/state\";\nimport {Answer, AnswerId, AnswerText} from \"./styles\";\nimport {Grid, Paper} from \"@material-ui/core\";\n\nexport interface Props {\n    question: Question\n\n    gottenAnswerId: string | null\n\n    onAnswer(params: { answerId: string }): void\n}\n\nexport const CurrentQuestion: React.FunctionComponent<Props> = ({ question, gottenAnswerId, onAnswer }) => {\n    const correctAnswerId = gottenAnswerId != null ? question.correctAnswerId : null\n\n    const onGettingAnswer = useCallback(\n        (params : {answerId: string}) => {\n            if (gottenAnswerId == null) {\n                onAnswer(params)\n            }\n        },\n        [onAnswer, gottenAnswerId]\n    )\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Paper>{question.id}. {question.text}</Paper>\n            </Grid>\n            {\n                question.picture &&\n                <Grid item xs={12}>\n                    <img src={`/images/${question.picture}`} alt=\"question\"/>\n                </Grid>\n            }\n            {\n                Object.entries(question.answers)\n                    .map(([id, answer]) => (\n                        <Grid item xs={12} sm={6} key={id}>\n                            <Answer\n                                isCorrect={correctAnswerId === id}\n                                isGotten={gottenAnswerId === id}\n                                onClick={onGettingAnswer.bind(null, { answerId: id })}\n                            >\n                                <AnswerId>{id}.</AnswerId>\n                                <AnswerText>\n                                     {answer.text}\n                                </AnswerText>\n                            </Answer>\n                        </Grid>\n                ))\n            }\n        </Grid>\n    )\n}\n","import React from \"react\"\nimport {Button} from \"@material-ui/core\";\n\n\nexport interface Props {\n    onNewSession(): void\n}\n\nexport const NewSessionButton: React.FunctionComponent<Props> = ({ onNewSession }) => {\n    return (\n        <Button onClick={onNewSession}>\n            Start a new session\n        </Button>\n    )\n}\n","import styled from 'styled-components'\nimport {Container} from \"@material-ui/core\";\n\nexport const NextButton = styled(Container)`\n  padding: 20px 20px;\n  display: flex;\n  justify-content: center;\n  justify-items: center;\n`\n","import React from \"react\"\nimport {Button} from \"@material-ui/core\";\nimport {NextButton} from \"./styles\";\n\n\nexport interface Props {\n    onNextQuestion(): void\n}\n\nexport const NextQuestionButton: React.FunctionComponent<Props> = ({ onNextQuestion }) => {\n    return (\n        <NextButton>\n            <Button onClick={onNextQuestion} variant=\"outlined\">\n                Next question >>>\n            </Button>\n        </NextButton>\n    )\n}\n","import styled from 'styled-components'\nimport {Box} from \"@material-ui/core\";\n\nexport const Counter = styled(Box)`\n  padding: 20px 20px;\n`\n\nexport const Correct = styled.span`\n  color: green;\n`\n","import React from \"react\"\nimport {Correct, Counter} from \"./styles\";\n\nexport interface Props {\n    total: number | null\n\n    current: number | null\n\n    correct: number | null\n}\n\nexport const SessionAnswersCounter: React.FunctionComponent<Props> =\n    ({ total, current, correct}) => {\n    return (\n        <Counter>\n            { current } / { total }, correct: <Correct>{ correct }</Correct>\n        </Counter>\n    )\n}\n","import styled from 'styled-components'\nimport {Box} from \"@material-ui/core\";\n\nexport const Result = styled(Box)`\n  padding: 20px 20px;\n`\n\nexport const Correct = styled.span`\n  color: green;\n`\n","import React from \"react\"\nimport {Correct, Result} from \"./styles\";\n\nexport interface Props {\n    total: number | null\n\n    correct: number | null\n}\n\nexport const SessionResult: React.FunctionComponent<Props> =\n    ({ total, correct}) => {\n    return (\n        <Result>\n            <p>\n                You have answered on { total } and\n                gotten <Correct>{ correct }</Correct> correct answers\n            </p>\n        </Result>\n    )\n}\n","import React from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\nimport {RootState} from \"../store/state\";\nimport {sessionActions} from \"../store/session/actions\";\nimport {\n    currentQuestion, currentQuestionsCount,\n    currentSessionQuestion,\n    totalCorrectAnswers,\n    totalQuestionsCount\n} from \"../store/selectors/correct-answer\";\nimport {CurrentQuestion} from \"../components/CurrentQuestion\";\nimport {NewSessionButton} from \"../components/NewSessionButton\";\nimport {NextQuestionButton} from \"../components/NextQuestionButton\";\nimport {Container} from \"@material-ui/core\";\nimport {SessionAnswersCounter} from \"../components/SessionAnswersCounter\";\nimport {SessionResult} from \"../components/SessionResult\";\n\nconst connector = connect(\n    (state: RootState)=> {\n        return {\n            session: state.session.current,\n            question: currentQuestion(state),\n            gottenAnswerId: currentSessionQuestion(state)?.gottenAnswerId || null,\n\n            totalQuestions: totalQuestionsCount(state),\n            currentQuestion: currentQuestionsCount(state),\n            correctAnswers: totalCorrectAnswers(state),\n        }\n    },\n    sessionActions\n)\n\ntype Props = ConnectedProps<typeof connector>\n\nconst Question: React.FunctionComponent<Props> = (props) => {\n    if (!props.session) {\n        return <NewSessionButton onNewSession={props.createNew} />\n    }\n\n    if (!props.question) {\n        return (\n            <Container>\n                <SessionResult\n                    total={props.totalQuestions}\n                    correct={props.correctAnswers}\n                />\n                <NewSessionButton onNewSession={props.createNew} />\n            </Container>\n        )\n    }\n\n    return (<Container>\n        <SessionAnswersCounter\n            total={props.totalQuestions}\n            current={props.currentQuestion}\n            correct={props.correctAnswers}\n        />\n        <CurrentQuestion\n            key=\"question\"\n            question={props.question}\n            gottenAnswerId={props.gottenAnswerId}\n            onAnswer={props.answer}\n        />\n        {\n            props.gottenAnswerId != null &&\n            (\n                <NextQuestionButton key=\"next\" onNextQuestion={props.nextQuestion}/>\n            )\n        }\n    </Container>)\n}\n\nexport default connector(Question)\n","import React from 'react';\nimport SessionQuestionContainer from \"./containers/SessionQuestionContainer\";\n\nfunction App() {\n  return (\n    <>\n      <SessionQuestionContainer/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ActionType, createAction} from \"typesafe-actions\";\nimport {Question} from \"./state\";\n\nexport const questionsActions =  {\n    retrieve: createAction(\"QUESTIONS/RETRIEVE\")(),\n\n    append: createAction(\"QUESTIONS/APPEND\")<AppendQuestionParams>(),\n}\n\nexport type QuestionsActions = ActionType<typeof questionsActions>\n\nexport interface AppendQuestionParams {\n    questions: Question[]\n}\n\n","import {QuestionsState} from \"./state\";\nimport {questionsActions, QuestionsActions} from \"./actions\";\nimport {createReducer} from \"typesafe-actions\";\nimport produce from \"immer\";\n\nconst defaultState: QuestionsState = {\n    all: { }\n}\n\ndeclare module 'typesafe-actions' {\n    interface Types {\n        RootAction: QuestionsActions;\n    }\n}\n\nexport const questionReducers = createReducer(defaultState)\n    .handleAction(questionsActions.append, (state, action) =>\n        produce(state, draft => {\n            for (const question of action.payload.questions) {\n                draft.all[question.id] = question\n            }\n        }))\n","import {SessionState} from \"./state\";\nimport {createReducer} from \"typesafe-actions\";\nimport produce from \"immer\";\nimport {SessionActions, sessionActions} from \"./actions\";\n\nconst defaultState: SessionState = {\n    current: null,\n}\n\nexport const sessionReducers = createReducer<SessionState, SessionActions>(defaultState)\n    .handleAction(sessionActions.setSession, (state, action) =>\n        produce(state, draft => {\n            draft.current = action.payload\n        }))\n    .handleAction(sessionActions.answer, (state, action) =>\n        produce(state, draft => {\n            const qestion = draft.current?.questions[draft.current.currentQuestionIndex]\n            if (qestion) {\n                qestion.gottenAnswerId = action.payload.answerId\n            }\n        }))\n    .handleAction(sessionActions.nextQuestion, (state) =>\n        produce(state, draft => {\n            if (draft.current) {\n                draft.current.currentQuestionIndex++\n            }\n        }))\n","import {combineReducers} from \"redux\";\n\nimport { questionReducers } from './questions/reducers'\nimport { sessionReducers } from './session/reducers'\n\nexport const rootReducer = combineReducers({\n    questions: questionReducers,\n    session: sessionReducers,\n})\n","import {combineEpics, Epic} from \"redux-observable\";\nimport {questionsActions, QuestionsActions} from \"./actions\";\nimport {isActionOf} from \"typesafe-actions\";\nimport {filter, map, mergeMap} from \"rxjs/operators\";\nimport {RootState} from \"../state\";\nimport {of} from \"rxjs\";\n\nconst epics : { [name: string] : Epic<QuestionsActions, QuestionsActions, RootState> } = {\n    retrieveQuestions: action$ =>\n        action$.pipe(\n            filter(isActionOf(questionsActions.retrieve)),\n            mergeMap(async _ => {\n                const { default: getter } = await import('../../data/questions')\n                return getter\n            }),\n            mergeMap( getter => getter()),\n            map(questions => questionsActions.append({\n                questions\n            }))\n        ),\n\n    initialize: () => of(null).pipe(\n        map(() => questionsActions.retrieve())\n    ),\n}\n\nexport const questionsEpics = combineEpics<QuestionsActions, QuestionsActions, RootState>(...Object.values(epics))\n","import {combineEpics, Epic} from \"redux-observable\";\nimport {SessionQuestion} from \"./state\";\nimport {sessionActions, SessionActions} from \"./actions\";\nimport {isActionOf} from \"typesafe-actions\";\nimport {filter, map, withLatestFrom} from \"rxjs/operators\";\nimport {RootState} from \"../state\";\nimport {selectRandom} from \"./logic/select-random\";\n\nconst epics : { [name: string] : Epic<SessionActions, SessionActions, RootState> } = {\n    createNewSession: (action$, state$) =>\n        action$.pipe(\n            filter(isActionOf(sessionActions.createNew)),\n            withLatestFrom(state$),\n            map(([, state]) => {\n                const allQuestionIds = Object.keys(state.questions.all)\n                const questions = selectRandom(allQuestionIds, allQuestionIds.length)\n                    .map((questionId) => ({\n                        questionId: +questionId,\n                        gottenAnswerId: null,\n                    } as SessionQuestion))\n\n                return sessionActions.setSession({\n                    questions,\n                    currentQuestionIndex: 0\n                })\n            })\n        ),\n}\n\nexport const sessionsEpics = combineEpics<SessionActions, SessionActions, RootState>(...Object.values(epics))\n","export function selectRandom<TItem>(all: TItem[], count: number): TItem[] {\n    const items = [...all]\n    const result = new Array<TItem>()\n    for (let i = 0; i < count; i++) {\n        const index = Math.floor(Math.random() * items.length)\n        const item = items.splice(index, 1)[0]\n        result.push(item)\n    }\n    return result\n}","import {combineEpics} from \"redux-observable\";\nimport {questionsEpics} from \"./questions/epics\";\nimport {sessionsEpics} from \"./session/epics\";\n\nexport const rootEpics = combineEpics(\n    questionsEpics,\n    sessionsEpics,\n)\n","import {createEpicMiddleware} from \"redux-observable\";\nimport {RootActions} from \"./actions\";\nimport {RootState} from \"./state\";\nimport {applyMiddleware, compose, createStore, Middleware} from \"redux\";\nimport {rootReducer} from \"./reducer\";\nimport {rootEpics} from \"./epics\";\nconst epicMiddleware = createEpicMiddleware<RootActions, RootActions, RootState>()\n\nfunction configureStore(initialState?: RootState) {\n    const middlerware: Middleware[] = [\n        epicMiddleware,\n    ]\n\n    const enhancer = compose(\n        applyMiddleware(...middlerware)\n    )\n\n    return createStore(\n        rootReducer,\n        initialState,\n        enhancer,\n    )\n}\n\nexport type RootStore = ReturnType<typeof configureStore>\n\nexport function newStore(initialState?: RootState) {\n    const store = configureStore(initialState)\n\n    epicMiddleware.run(rootEpics)\n\n    return store\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {newStore} from \"./store\";\n\nReactDOM.render((\n    <Provider store={newStore()}>\n        <App />\n    </Provider>\n),\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}